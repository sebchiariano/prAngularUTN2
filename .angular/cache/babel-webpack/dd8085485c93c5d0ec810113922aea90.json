{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { BehaviorSubject } from 'rxjs';\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword, authState } from '@angular/fire/auth';\nimport { doc, getDoc } from '@angular/fire/firestore';\nimport 'rxjs/add/operator/switchMap';\nimport { initializeApp } from '@angular/fire/app';\nimport { environment } from '../environments/environment';\nimport { getFirestore } from '@angular/fire/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/fire/firestore\";\n;\nexport let UsuariosService = /*#__PURE__*/(() => {\n  class UsuariosService {\n    constructor(afAuth, router, firestore) {\n      this.afAuth = afAuth;\n      this.router = router;\n      this.firestore = firestore;\n      this.authenticationState = new BehaviorSubject(localStorage.getItem(\"login\") ? true : false);\n      this.firestore = getFirestore(initializeApp(environment.firebase));\n      this.user$ = authState(afAuth);\n    }\n\n    login(email, password) {\n      signInWithEmailAndPassword(this.afAuth, email, password).then(value => {\n        this.authenticationState.next(true);\n        localStorage.setItem(\"login\", \"true\");\n        this.router.navigate(['/']);\n        this.user = authState(this.afAuth);\n        this.uidUser = value.user.uid;\n        console.log(\"usuarioData\", this.getUserData());\n        console.log(\"value\", value);\n        console.log(\"user$:\", this.user$);\n        console.log(\"user:\", this.user);\n      }).catch(err => {\n        console.log('Something went wrong: ', err.message);\n\n        if (err.code == \"auth/wrong-password\" || err.code == \"auth/user-not-found\") {\n          alert(\"El usuario o la contraseña ingresada son incorrectos\");\n        }\n      });\n      /*\r\n      this.authenticationState.next(true);\r\n      localStorage.setItem(\"login\",\"true\");\r\n      */\n    }\n\n    getUserData() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const docRef = doc(this.firestore, \"usuarios\", this.uidUser);\n        const docSnap = yield getDoc(docRef);\n\n        if (docSnap.exists()) {\n          console.log(\"Document data:\", docSnap.data());\n          return docSnap.data();\n        } else {\n          // doc.data() will be undefined in this case\n          console.log(\"No such document!\");\n          return null;\n        }\n      });\n    }\n\n    logout() {\n      this.afAuth.signOut().then(() => {\n        this.authenticationState.next(false);\n        localStorage.removeItem(\"login\");\n      });\n      /*\r\n      this.authenticationState.next(false)\r\n      localStorage.removeItem(\"login\")\r\n      */\n    }\n\n    isAuthenticated() {\n      var isAuthent;\n      isAuthent = this.authenticationState.value;\n      return isAuthent;\n    }\n\n    isAuthenticate() {\n      return this.authenticationState;\n    }\n\n    emailSignup(email, password) {\n      createUserWithEmailAndPassword(this.afAuth, email, password).then(value => {\n        console.log('Succes', value);\n      }).catch(error => {\n        console.log('Something went wrong: ', error);\n      });\n    }\n\n  }\n\n  UsuariosService.ɵfac = function UsuariosService_Factory(t) {\n    return new (t || UsuariosService)(i0.ɵɵinject(i1.Auth), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.Firestore));\n  };\n\n  UsuariosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsuariosService,\n    factory: UsuariosService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsuariosService;\n})();","map":null,"metadata":{},"sourceType":"module"}