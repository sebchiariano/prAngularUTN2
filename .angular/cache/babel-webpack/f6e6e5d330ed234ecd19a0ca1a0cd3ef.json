{"ast":null,"code":"import { BehaviorSubject, Observable } from 'rxjs';\nimport { user, signInWithEmailAndPassword, createUserWithEmailAndPassword, authState, onAuthStateChanged } from '@angular/fire/auth';\nimport 'rxjs/add/operator/switchMap';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nimport * as i2 from \"@angular/router\";\nexport let UsuariosService = /*#__PURE__*/(() => {\n  class UsuariosService {\n    constructor(afAuth, router) {\n      this.afAuth = afAuth;\n      this.router = router;\n      this.authenticationState = new BehaviorSubject(localStorage.getItem(\"login\") ? true : false);\n      this.user$ = user(afAuth); // or use this version...\n\n      this.user$ = authState(afAuth); // or use this version...\n\n      this.user$ = new Observable(observer => onAuthStateChanged(afAuth, observer));\n    }\n\n    login(email, password) {\n      signInWithEmailAndPassword(this.afAuth, email, password).then(value => {\n        this.authenticationState.next(true);\n        localStorage.setItem(\"login\", \"true\");\n      }).catch(err => {\n        console.log('Something went wrong: ', err.message);\n      });\n      /*\r\n      this.authenticationState.next(true);\r\n      localStorage.setItem(\"login\",\"true\");\r\n      */\n    }\n\n    logout() {\n      this.afAuth.signOut().then(() => {\n        this.authenticationState.next(false);\n        localStorage.removeItem(\"login\");\n      });\n      /*\r\n      this.authenticationState.next(false)\r\n      localStorage.removeItem(\"login\")\r\n      */\n    }\n\n    isAuthenticated() {\n      return this.authenticationState.getValue;\n    }\n\n    isAuthenticate() {\n      return this.authenticationState;\n    }\n\n    emailSignup(email, password) {\n      createUserWithEmailAndPassword(this.afAuth, email, password).then(value => {\n        console.log('Sucess', value);\n      }).catch(error => {\n        console.log('Something went wrong: ', error);\n      });\n    }\n\n  }\n\n  UsuariosService.ɵfac = function UsuariosService_Factory(t) {\n    return new (t || UsuariosService)(i0.ɵɵinject(i1.Auth), i0.ɵɵinject(i2.Router));\n  };\n\n  UsuariosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsuariosService,\n    factory: UsuariosService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsuariosService;\n})();","map":null,"metadata":{},"sourceType":"module"}